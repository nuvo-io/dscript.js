// Generated by CoffeeScript 1.6.3
(function() {
  var BEGIN, CONTROL, END, Point, STATUSES, drag, dscriptServer, exports, interpolate, plotty, points, root, state;

  root = this;

  plotty = {};

  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = jshapes;
    }
    exports.jshapes = jshapes;
  } else {
    root.plotty = plotty;
  }

  drag = false;

  BEGIN = 0;

  CONTROL = 1;

  END = 2;

  STATUSES = 3;

  points = [];

  state = BEGIN;

  dscriptServer = "ws://192.168.0.38:9990";

  Point = (function() {
    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    return Point;

  })();

  interpolate = function(g2d, points, color) {
    g2d.save();
    g2d.moveTo(points[BEGIN].x, points[BEGIN].y);
    g2d.quadraticCurveTo(points[CONTROL].x, points[CONTROL].y, points[END].x, points[END].y);
    g2d.strokeStyle = color;
    g2d.lineWidth = 5;
    g2d.stroke();
    return g2d.restore();
  };

  root.color = "";

  window.onload = function() {
    var plottyTopic, runtime;
    console.log("Running main");
    runtime = new dds.Runtime(dscriptServer);
    runtime.connect();
    plottyTopic = new dds.Topic(0, "QuadraticCurve", "io.nuvo.plotty.QuadraticCurve");
    runtime.onconnect = function() {
      root.writer = new dds.DataWriter(runtime, plottyTopic, new dds.DataWriterQos(dds.Reliability.Reliable));
      root.reader = new dds.DataReader(runtime, plottyTopic, new dds.DataReaderQos(dds.Reliability.Reliable));
      return root.reader.addListener(function(d) {
        return interpolate(root.g2d, d.points, d.color);
      });
    };
    root.canvas = root.document.getElementById("plottyCanvas");
    console.log("canvas = " + canvas);
    root.g2d = canvas.getContext("2d");
    canvas.onmousemove = function(e) {
      var curve;
      if (drag) {
        points[state] = new Point(e.x, e.y);
        if (state === END) {
          interpolate(root.g2d, points, root.color);
          curve = {};
          curve.cid = 0;
          curve.color = root.color;
          curve.points = points;
          root.writer.write(curve);
          points[BEGIN] = points[END];
          return state = CONTROL;
        } else {
          return state = state + 1;
        }
      }
    };
    canvas.onmousedown = function(e) {
      drag = true;
      state = BEGIN;
      points = [];
      root.color = root.document.getElementById("color").value;
      return console.log("mouse down evt (" + e.x + ", " + e.y + ")");
    };
    return canvas.onmouseup = function(e) {
      drag = false;
      return console.log("mouse up evt (" + e.x + ", " + e.y + ")");
    };
  };

}).call(this);

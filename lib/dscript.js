// Generated by CoffeeScript 1.6.3
/*
 This file defines the CoffeeScript API for DDS
*/


(function() {
  var ContentFilter, DSCommandId, DSEntityKind, DataCache, DataReader, DataWriter, Durability, DurabilityKind, EntityQos, History, HistoryKind, None, Partition, PolicyId, Reliability, ReliabilityKind, Runtime, Some, TimeFilter, Topic, createCommand, createHeader, createTopicInfo, dds, exports, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  root = this;

  dds = {};

  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = dds;
    }
    exports.dds = dds;
  } else {
    root.dds = dds;
  }

  dds.VERSION = "0.1.0";

  None = {};

  None.map = function(f) {
    return None;
  };

  None.flatMap = function(f) {
    return None;
  };

  None.get = function() {
    return void 0;
  };

  None.getOrElse = function(f) {
    return f();
  };

  None.orElse = function(f) {
    return f();
  };

  None.isEmpty = function() {
    return true;
  };

  Some = (function() {
    function Some(value) {
      this.value = value;
    }

    Some.prototype.map = function(f) {
      return new Some(f(this.value));
    };

    Some.prototype.flatMap = function(f) {
      return f(this.value);
    };

    Some.prototype.get = function() {
      return this.value;
    };

    Some.prototype.getOrElse = function(f) {
      return this.value;
    };

    Some.prototype.orElse = function(f) {
      return this;
    };

    Some.prototype.isEmpty = function() {
      return false;
    };

    return Some;

  })();

  Topic = (function() {
    function Topic(did, tname, ttype) {
      this.did = did;
      this.tname = tname;
      this.ttype = ttype;
    }

    return Topic;

  })();

  DataReader = (function() {
    function DataReader(topic, qos) {
      this.topic = topic;
      this.qos = qos;
      this.socketDataHandler = __bind(this.socketDataHandler, this);
      this.handlers = [];
      dds.ddscriptRuntime.createDataReaderConnection(topic, qos, this);
    }

    DataReader.prototype.addListener = function(l) {
      var idx;
      idx = this.handlers.length;
      this.handlers = this.handlers.concat(l);
      return idx;
    };

    DataReader.prototype.removeListener = function(idx) {
      var h;
      h = this.handlers;
      return this.handlers = h.slice(0, idx).concat(h.slice(idx + 1, h.length));
    };

    DataReader.prototype.socketDataHandler = function(m) {
      var d, s;
      s = m.data;
      d = JSON.parse(s);
      return this.handlers.forEach(function(h) {
        return h(d);
      });
    };

    return DataReader;

  })();

  DataWriter = (function() {
    function DataWriter(topic, qos) {
      this.topic = topic;
      this.qos = qos;
      this.socket = dds.None;
      dds.ddscriptRuntime.createDataWriterConnection(topic, qos, this);
    }

    DataWriter.prototype.write = function() {
      var ds;
      ds = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.socket.map((function(s) {
        var sendData;
        sendData = function(x) {
          var e, xs;
          xs = typeof x === 'string' ? x : JSON.stringify(x);
          try {
            return s.send(xs);
          } catch (_error) {
            e = _error;
            return console.log(e);
          }
        };
        return ds.forEach(sendData);
      }));
    };

    return DataWriter;

  })();

  DataCache = (function() {
    function DataCache(depth, cache) {
      this.depth = depth;
      this.cache = cache;
      this.fold = __bind(this.fold, this);
      if ((this.cache != null) === false) {
        this.cache = {};
      }
    }

    DataCache.prototype.write = function(k, data) {
      var v;
      v = this.cache[k];
      if ((v != null) === false) {
        v = [data];
      } else {
        v = v.length < this.depth ? v.concat(data) : v.slice(1, v.lenght).concat(data);
      }
      return this.cache[k] = v;
    };

    DataCache.prototype.forEach = function(f) {
      var k, v, _ref, _results;
      _ref = this.cache;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(v.forEach(f));
      }
      return _results;
    };

    DataCache.prototype.map = function(f) {
      var k, result, v, _ref;
      result = {};
      _ref = this.cache;
      for (k in _ref) {
        v = _ref[k];
        result[k] = v.map(f);
      }
      return new DataCache(this.depth, result);
    };

    DataCache.prototype.filter = function(f) {
      var fv, k, result, rv, v, _i, _len, _ref;
      result = {};
      _ref = this.cache;
      for (k in _ref) {
        v = _ref[k];
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          fv = v[_i];
          if (f(v)) {
            rv = fv;
          }
        }
        if (rv.length !== 0) {
          result[k] = rv;
        }
      }
      return result;
    };

    DataCache.prototype.filterNot = function(f) {
      return filter(function(s) {
        return !f(s);
      });
    };

    DataCache.prototype.read = function() {
      var k, result, v, _ref;
      result = [];
      _ref = this.cache;
      for (k in _ref) {
        v = _ref[k];
        result = result.concat(v);
      }
      return result;
    };

    DataCache.prototype.take = function() {
      var k, result, tmpCache, v;
      tmpCache = this.cache;
      this.cache = [];
      result = [];
      for (k in tmpCache) {
        v = tmpCache[k];
        result = result.concat(v);
      }
      return result;
    };

    DataCache.prototype.takeWhile = function(f) {
      var e, k, result, rv, tv, v, _i, _j, _len, _len1, _ref;
      result = [];
      _ref = this.cache;
      for (k in _ref) {
        v = _ref[k];
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          e = v[_i];
          if (f(v)) {
            tv = e;
          }
        }
        for (_j = 0, _len1 = v.length; _j < _len1; _j++) {
          e = v[_j];
          if (!f(v)) {
            rv = e;
          }
        }
        result = result.concat(tv);
        this.cache[k] = rv;
      }
      return result;
    };

    DataCache.prototype.get = function(k) {
      var v;
      v = this.cache[k];
      if ((v === void 0)(None)) {

      } else {
        return new Some(v);
      }
    };

    DataCache.prototype.getOrElse = function(k, f) {
      var v;
      v = this.cache[k];
      if ((v === void 0)(f())) {

      } else {
        return new Some(v);
      }
    };

    DataCache.prototype.fold = function(z) {
      var _this = this;
      return function(f) {
        var k, r, v, _ref;
        r = z;
        _ref = _this.cache;
        for (k in _ref) {
          v = _ref[k];
          r = r + v.reduceRight(f);
        }
        return r;
      };
    };

    return DataCache;

  })();

  root.dds.bind = function(key) {
    return function(reader, cache) {
      return reader.addListener(function(d) {
        return cache.write(key(d), d);
      });
    };
  };

  root.dds.bindWithFun = function(key) {
    return function(fun) {
      return function(reader, cache) {
        return reader.addListener(function(d) {
          fun(cache);
          return cache.write(key(d), d);
        });
      };
    };
  };

  root.dds.Topic = Topic;

  root.dds.DataReader = DataReader;

  root.dds.DataWriter = DataWriter;

  root.dds.DataCache = DataCache;

  root.dds.None = None;

  root.dds.Some = Some;

  /*
    Protocol
  */


  DSEntityKind = {
    Topic: 0,
    DataReader: 1,
    DataWriter: 2
  };

  DSCommandId = {
    OK: 0,
    Error: 1,
    Create: 2,
    Delegate: 3,
    Unregister: 4
  };

  createHeader = function(c, k, s) {
    var h;
    h = {
      cid: c,
      ek: k,
      sn: s
    };
    return h;
  };

  createTopicInfo = function(domainId, topic, qos) {
    var ti;
    ti = {
      did: domainId,
      tn: topic.tname,
      tt: topic.ttype,
      qos: qos.policies
    };
    return ti;
  };

  createCommand = function(cmdId, kind) {
    return function(seqn, topic, qos) {
      var cmd, tb, th;
      th = createHeader(cmdId, kind, seqn);
      tb = createTopicInfo(topic.did, topic, qos);
      cmd = {
        h: th,
        b: tb
      };
      return cmd;
    };
  };

  root.dds.DSEntityKind = DSEntityKind;

  root.dds.DSCommandId = DSCommandId;

  root.dds.createDataReaderCommand = createCommand(DSCommandId.Create, DSEntityKind.DataReader);

  root.dds.createDataWriterCommand = createCommand(DSCommandId.Create, DSEntityKind.DataWriter);

  /*
    QoS Policies
  */


  PolicyId = {
    History: 0,
    Reliability: 1,
    Partition: 2,
    ContentFilter: 3,
    TimeFilter: 4,
    Durability: 5,
    TransportPriority: 6,
    Ownership: 7,
    OwnershipStrenght: 8
  };

  /*
     History Policy
  */


  HistoryKind = {
    KeepAll: 0,
    KeepLast: 1
  };

  History = {
    KeepAll: {
      id: PolicyId.History,
      k: HistoryKind.KeepAll
    },
    KeepLast: function(depth) {
      var result;
      result = {
        id: PolicyId.History,
        k: HistoryKind.KeepLast,
        v: depth
      };
      return result;
    }
  };

  /*
    Reliability Policy
  */


  ReliabilityKind = {
    Reliable: 0,
    BestEffort: 1
  };

  Reliability = {
    BestEffort: {
      id: PolicyId.Reliability,
      k: ReliabilityKind.BestEffort
    },
    Reliable: {
      id: PolicyId.Reliability,
      k: ReliabilityKind.Reliable
    }
  };

  /*
    Partition Policy
  */


  Partition = function() {
    var p, plist, policy;
    p = arguments[0], plist = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    policy = {
      id: PolicyId.Partition,
      vs: plist.concat(p)
    };
    return policy;
  };

  /*
    Content Filter Policy
  */


  ContentFilter = function(expr) {
    var contentFilter;
    contentFilter = {
      id: PolicyId.ContentFilter,
      v: expr
    };
    return contentFilter;
  };

  /*
    Time Filter Policy
  */


  TimeFilter = function(duration) {
    var timeFilter;
    timeFilter = {
      id: PolicyId.TimeFilter,
      v: duration
    };
    return timeFilter;
  };

  /*
    Durability Policy
  */


  DurabilityKind = {
    Volatile: 0,
    TransientLocal: 1,
    Transient: 2,
    Persistent: 3
  };

  Durability = {
    Volatile: {
      id: DurabilityKind.Volatile
    },
    TransientLocal: {
      id: DurabilityKind.TransientLocal
    },
    Transient: {
      id: DurabilityKind.Transient
    },
    Persistent: {
      id: DurabilityKind.Persistent
    }
  };

  /*
    The Entity QoS is represented as a list of Poilicies.
  */


  EntityQos = (function() {
    function EntityQos() {
      var p, ps;
      p = arguments[0], ps = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      console.log(p);
      console.log(ps);
      this.policies = ps.concat(p);
      console.log(this.policies);
    }

    EntityQos.prototype.add = function() {
      var p;
      p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return new EntityQos(this.policies.concat(p));
    };

    return EntityQos;

  })();

  /*
    Policy and QoS Exports
  */


  root.dds.HistoryKind = HistoryKind;

  root.dds.History = History;

  root.dds.ReliabilityKind = ReliabilityKind;

  root.dds.Reliability = Reliability;

  root.dds.Partition = Partition;

  root.dds.DurabilityKind = DurabilityKind;

  root.dds.Durability = Durability;

  root.dds.TimeFilter = TimeFilter;

  root.dds.ContentFilter = ContentFilter;

  root.dds.DataReaderQos = EntityQos;

  root.dds.DataWriterQos = EntityQos;

  /*
    Runtime
  */


  Runtime = (function() {
    function Runtime(controllerURL, readerURLPrefix, writerURLPrefix) {
      var _this = this;
      this.controllerURL = controllerURL;
      this.readerURLPrefix = readerURLPrefix;
      this.writerURLPrefix = writerURLPrefix;
      this.handleMessage = __bind(this.handleMessage, this);
      this.createDataWriterConnection = __bind(this.createDataWriterConnection, this);
      this.createDataReaderConnection = __bind(this.createDataReaderConnection, this);
      this.sn = 0;
      this.drmap = {};
      this.dwmap = {};
      console.log("Connecting to: " + this.controllerURL);
      this.ctrlSock = new WebSocket(this.controllerURL);
      this.ctrlSock.onmessage = function(msg) {
        return _this.handleMessage(msg);
      };
    }

    Runtime.prototype.createDataReaderConnection = function(topic, qos, dr) {
      var cmd, scmd;
      cmd = dds.createDataReaderCommand(this.sn, topic, qos);
      this.drmap[this.sn] = dr;
      this.sn = this.sn + 1;
      scmd = JSON.stringify(cmd);
      return this.ctrlSock.send(scmd);
    };

    Runtime.prototype.createDataWriterConnection = function(topic, qos, dw) {
      var cmd, scmd;
      cmd = dds.createDataWriterCommand(this.sn, topic, qos);
      this.dwmap[this.sn] = dw;
      this.sn = this.sn + 1;
      scmd = JSON.stringify(cmd);
      return this.ctrlSock.send(scmd);
    };

    Runtime.prototype.handleMessage = function(s) {
      var dr, drsock, dw, dwsock, eid, msg, url;
      console.log('received' + s.data);
      msg = JSON.parse(s.data);
      if (msg.h.cid === DSCommandId.OK) {
        if (msg.h.ek === DSEntityKind.DataReader) {
          eid = msg.b.eid;
          url = this.readerURLPrefix + '/' + eid;
          dr = this.drmap[msg.h.sn];
          drsock = new WebSocket(url);
          drsock.onmessage = dr.socketDataHandler;
          delete this.drmap[msg.h.sn];
        } else if (msg.h.ek === DSEntityKind.DataWriter) {
          eid = msg.b.eid;
          url = this.writerURLPrefix + '/' + eid;
          dw = this.dwmap[msg.h.sn];
          dwsock = new WebSocket(url);
          dw.socket = new dds.Some(dwsock);
          delete this.dwmap[msg.h.sn];
        }
      }
      if (msg.h.cid === DSCommandId.Error) {
        throw msg.b.msg;
      }
    };

    return Runtime;

  })();

  root.dds.ddscriptRuntime = new Runtime(dsconf.controllerURL, dsconf.readerPrefixURL, dsconf.writerPrefixURL);

  root.dds.Runtime = Runtime;

}).call(this);
